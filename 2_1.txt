몽고디비 연결하기

var db;
MongoClient.connect('접속URL', { useUnifiedTopology: true }, function (에러, client) {
	if (에러) return console.log(에러)
	db = client.db('todoapp');

	app.listen(8080, function () {
		console.log('listening on 8080')
	});
});


콜렉션에 자료 추가하기

위 코드의 중간에

db.collection('post').insertOne( {이름 : 'John', _id : 100} , function(에러, 결과){
	    console.log('저장완료'); 
	});

코드를 추가한다.

콜렉션중에 'post'이름의 콜렉션을 선택하고
insertOne()함수로 데이터를 저장한다.

ejs 파일 만들기
html 파일과 같다.
다른점이라면 중간중간 ejs문법으로 데이터를 입력시킬 수 있다.

# ejs파일은 views 폴더 안에 있어야만한다.

ejs 기본적인 문법

<%= user.name %>
html 중간중간에 서버 데이터를 집어넣고 싶으면 <%%> 기호를 사용한다.
그러면 html 글자로 렌더링이 된다.

ejs문법을 사용하면 자바스크립트 문법도 사용 가능하다.

<% if (user) { %>
  <h2><%= user.name %></h2>
<% } %>

html에 if문을 적용하거나 반복문을 적용하고 싶으면 <% %> 내부에
자바스크립트 문법을 적으면 된다.

mongodb에서 데이터를 꺼내고 싶다면
db.collection('post').find()
db.collection('post').findOne()

post콜렉션에 저장된 모든 데이터를 가져오자
라고 한다면

app.get('/list', function(req, res){
    .collection('post').find().toArray(function(err, result){
        console.log('result')
        res.render('list.ejs')
    })
})

.find().toArray()라고 함수를 사용하면 post컬렉션에 있는
모든 데이터를 array 자료형으로 가져온다.

데이터를 list.ejs 파일에 보내고 싶다면?

res.render('list.ejs', {posts : result})
.render() 함수에 둘째 파라미터를 적는다.
list.ejs파일을 렌더링함과 동시에 {post:result}라는 데이터를 함깨 보낼 수 있다.

_id 를 추가하여 저장하자
_id 값이 있어야 삭제도 쉽고 수정도 쉽다.
app.post('/add', function(req, res){
	res.send('전송완료');
	db.collection('post').insertOne({_id : 1, title: req.body.title, date : req.body.date }, function(){
		console.log('save complete');
	})
})

insertOne() 함수 안에 _id : 1 이라는 항목을 새로 써주면 아이디달아서 저장하기 완료

하지만 1이라고 하드코딩을 했다.

app.post('/add', function(req, res){
	res.send('전송완료');
	db.collection('post').insertOne({_id : 게시물개수 + 1}, function(){
		console.log('save complete.');
	})
})

이런식으로 하드코딩이 아니라 자동으로 증가하도록 코딩한다.


DB 데이터를 수정하고 싶으면 updateOne을 사용한다.
db.collection('counter').updateOne({수정할 데이터의 이름}, {수정치}, function(err, result){
	console.log(result);
})
updateOne() 함수에는 3가지 파라미터가 필요하다.
- 수정할 데이터 이름
{name : '게시물개수'}
- 수정치
{$set : {totalPost : 100}} # 값을 100으로 변경
{$inc : {totalPost : 1}} # 값을 1 증가
$표시는 오퍼레이터다. 검색해서 필요한 오퍼레이터를 사용하도록 하자


서버 요청에는 4가지 종류가 있다.
get post put delete
html에서는 put delete를 일반적으로 할 수 없다.

삭제요청을 하려면 3가지 방법이 있다.
1. method-override 라이브러리를 사용
2. ajax로 delete 요청을 보낸다.
3. post요청을 날려서 delete 요청을 처리한다.

2번 방식을 사용하자

ajax란 무엇인가?
프론트엔드에서 jacascript를 이용해 서버에 여러가지 요청을 할 수 있는 문법이다.
새로고침 없이도 서버에 요청을 할 수 있다.

바닐라 자바스크립트로도 ajax가 가능하다.
하지만 코드가 너무 길어지기 때문에 jquery를 설치한다.

<script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
jquery 스크립트 아래에 새로 스크립트를 열어서 ajax를 사용하자!

<script>
	$.ajax({
		method : 'POST',
		url : '/add',
		data : '결혼하기'
	})
</script>

/add 경로로 post 요청을 하는데 요청과 함께 '결혼하기' 라는 데이터를 보내주세요
라는 코드다.

언제 실행되냐면 script 태그 안에 그대로 넣으면 list.ejs 페이지를 방문할 때마다 바로 실행된다.
하지만 새로고침 없이도 코드가 작동하기 때문에 요청이 성공했는지 실패했는지 모른다.

<script>
	$.ajax({
		method : 'POST',
		url : '/add',
		data : '결혼하기'
	}).done(function(result){
		ajax 성공시 코드
	}).fail(function(err){
		ajax 실패시 코드
	});
</script>


ajax로 delete 요청시 가장 중요한 내용이 있다.
삭제를 원하는 게시물의 번호를 지정해야한다.

<script>
	$.ajax({
		method : 'POST',
		url : '/add',
		data : {_id : 1} <- 이런식으로
	}).done(function(result){
		ajax 성공시 코드
	}).fail(function(err){
		ajax 실패시 코드
	});
</script>

서버에서는
app.delete('/delete', function(req, res){
	db.collection('post').deleteOne(req.body, function(err, result){
		console.log('delete complete');
	})
	res.send('delete complete');
})

/delete 경로로 DELETE 요청을 하면 코드를 실행시킨다.


AJAX로 DELETE 요청시 가장 중요한 내용은 원하는 게시물을 삭제할 수 있도록 
삭제 원하는 게시물의 번호를 전송하는 것이다.

$.ajax({
	method : 'DELETE',
	url : '/delete',
	data : {_id : 1}
}).done(function(result){
	~~~~
})

data : {} 부분에 삭제를 원하는 게시물 아이디를 적어 보낸다.
서버의 경우를 살펴보자

app.delete('/delete', function(req, res){
	db.collection('post').deleteOne(req.body, function(err, result){
		console.log('delete complete');
	})
	res.send('delete complete');
});

deleteOne() 함수를 사용하면 삭제가 가능하다.
deleteOne(삭제를 원하는 데이터, function(){})
++ ajax요청시 data:{_id:1} 라고 적은 정보는 req.body에 담겨온다. ++
이 정보를 deleteOne 에 집어넣으면 {_id : 1} 이라는 게시물을 삭제할 수 있다.

##
ajax 요청등으로 데이터를 서버에 전송할 때 숫자 자료들이 문자로 바껴서 올 때가 있다.
이를 인트로 바꿔준다.
req.body._id = parseInt(req.body._id);

삭제 버튼을 눌렀을 때만 ajax요청을 하도록 하자
$(".delete").click(function(e){
	var tNum = e.target.dataset.id;

	$.ajax({
	method : 'DELETE',
	url : '/delete',
	data : {_id : tNum}
	}).done(function(result){
		console.log('done');
	});
});

_id : 1 이라고 하드코딩을 했기 때문에 1번 게시물만 삭제할 수 있다.
버튼을 눌렀을 때 해당되는 게시물을 삭제할 수 있도록 코드를 수정하자

<script>
	$('.delete').click(function(){
		$.ajax({
			method : 'delete',
			url : '/delete',
			data : {_id : 지금 클릭한 삭제버튼의 글번호}
		}).done(function(result){
			~~~
		})
	})
</script>

{_id : 1} 이런식이 아니라 지금 누른 삭제 버튼의 번호를 집어넣을 수 있도록 한다.
이런 방식을 사용하려면 버튼마다 미리 번호를 주어야한다.
<button> 태그에 data-id 라는 속성을 추가한다.
data-id 의 값을 <%= posts[i]._id %> 로 지정한다.

data : {_id : 지금 클릭한 삭제버튼의 글번호} 부분은
위 데이터를 참조하여
data : {_id : e.target.dataset.id}


요청에 응답하기

-res.send('<p>bla bla</p>')
	간단한 문자나 html을 보낸다.
-res.status(404).send('sorry we cannot find that')
	응답코드를 보낸다.
-res.sendFile('/upload/logo.png')
	static 파일들을 보낸다
-res.render('list.ejs', {data for the ejs})
	ejs등의 템플릿이 적용된 페이지들을 렌더링할 수 있다.
-res.json(jsonData)
	제이슨 데이터를 담아보낸다.




ajax 요청 성공 또는 실패시 특정 코드 실행하기
데이터가 오거나 200코드가 오면 성공
데이터가 안 오거나 400, 500코드가 오면 실패시
성공이나 실패시 각각 기능을 실행하려면 done 또는 fail 함수를 이용

<script>
	$('delete').click(function(){
		$.ajax({
			method : 'DELETE',
			url : '/delete',
			data : { _id : e.target.dataset.id }
		}).done((result)=>{
			// ajax 성공시 실행할 코드
		}).faul((xhr, code, err)=>{
			// ajax 실패시 실행할 코드
		});
	});
</script>

(function 대신 => 써도 똑같다.)
fail 함수 내분의 3개 파라미터는 차례로 jquery의 
XMLHttpRequest, error code, error message
를 의미한다.


상세페이지를 만들어보자
누군가 detail/3 으로 접속하면 3번 게시물 데이터를 보여주고
누군가 detail/4 으로 접속하면 4번 게시물 데이터를 보여준다.

app.get('post', function(req, res){
	res.render('detail.ejs', {3번 게시물데이터})
});

app.get('post', function(req, res){
	res.render('detail.ejs', {4번 게시물데이터})
});
app.get{~~}을 100개 만들면 처리된다.

100개 만들기가 힘들다면 파라미터 문법을 사용한다.

app.get('/detail/:id', function(req,res){
	res.render('detail.ejs', {~~})
});

url 자리에 :(콜론)을 붙여주면 누군가 /detail/ 뒤에 아무 문자열이나 입력하면~ 이라는 뜻이다.
이제 사용자가 /detail/ 뒤에 어떤 숫자나 문자를 붙이든 위의 코드 3줄로 인식할 수 있다.

# : 뒤에는 자유롭게 작멍이 가능하다. id가 좋아서 그냥 한거임
(파라미터를 두 개 이상 이어붙일 수도 있다.)

detail/2 로 방문하면 2번 게시물을 보내야한다.
-> detail/2로 방문하면 _id 가 2인 게시물을 db에서 찾아야한다.

app.get('/detail/:id', function(req, res){
	db.collection('post').findOne({ _id : URL에 입력한id값 }, function(err, result){
		res.render('detail.ejs', {~~~})
	});
});

findOne() 함수를 사용해서 _id = 2인 게시물을 db에서 찾아낸다.
.findOne({원하는게시물정보}, function(){완료시 실행할 코드}); 식이다.

이 코드에 사용자가 URL에 입력한 :id 값을 그대로 넣어주면 된다.
req.params.id 라고 치면 된다. (구글로 검색)

app.get('/delete/:id', function(req, res){
	db.collection('post').findOne({ _id : req.params.id}, function(err, result){
		res.render('detail.ejs', { data : result} );
	})
})
셋 째 줄에서 db에서 찾은 결과를 data 라는 이름으로 ejs파일로 보내고 있다.
ejs 파일 내에서 그 게시물 데이터를 가지고 html에 넣을 수 있다.

하지만 req.params.id 는 String 타입이기 때문에 int 형으로 바꿔줘야한다.
parseInt(req.params.id) 로 처리하면 int 형으로 자료가 넘어간다.

이제 ejs 파일로 넘어간 데이터를 ejs에서 출력하도록 코딩하자

<h4> 제목 : <%= data.title %> </h4>
<h4> 날짜 : <%= data.date %> </h4>
식으로 ejs에서 파일을 출력한다.


html 조립식 개발하기

html 파일이 많은데 공통 요소가 있다면 그 요소를 따로 저장해서 다른 html 파일로 불러올 수 있다.

공통 요소 파일을 만들어서 part.html로 저장한다. (이름은 맘대로)
공통 요소가 들어갈 자리에
<%- include('part.html') %> 를 입력한다.

이 방식은 html에서는 안되고 ejs파일에서만 사용할 수 있다.
다른 모든 html 파일들을 모두 ejs로 바꾸고 server.js의 url을 수정하는 방식으로 수정하자
불러올 때는 res.render() 함수를 사용해야한다.



